### ---------------------------------------------
### Default Contessa configuration properties.
### ---------------------------------------------
contessa:
  ### =========================================
  ### The storage type to use. Supports a small
  ### set of types:
  ###
  ### `SQL`   - (default) storing assets into
  ###           an SQL database.
  ###
  ### `NOSQL` - storing assets into a NoSQL
  ###           database.
  ###
  ### `LOCAL` - file based storage type, saving
  ###           content assets to a local file
  ###           system.
  ###
  ### `NONE`  - disables the storage; used only
  ###           for testing and development.
  ### -----------------------------------------
  store: SQL  
  ### =========================================
  ### Toggles the enabled UIs on/off, allowing
  ### different types of access to media content
  ### upload and download.
  ###
  ### `web`  - simple GET/POST for upload and
  ###          direct media access.
  ### 
  ### `rest` - with support for application/json
  ###          responses.
  ###
  ### `amqp` - message broker based upload and
  ###          query/response support for
  ###          content.
  ###
  ### `file` - file based drop-folder or polling
  ###          interface.
  ### -----------------------------------------
  web.enabled: true
  rest.enabled: true
  #amqp.enabled: true
  #file.enabled: true
  ### =========================================
  ### 
  ### An optional list of cookie names, that are
  ### required to be set at all for any request.
  ###
  #required-cookies:
  #  - required.cookie.foo
  #  - required.cookie.bar
  ### -----------------------------------------
  
### ---------------------------------------------
### Customized configuration properties for the
### Contessa application.
### ---------------------------------------------
spring:
  application:
    name: contessa
  datasource:
    ## Default is an embedded database
    url: jdbc:h2:mem:contessa;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE    
  jpa:
    hibernate:
      ddl-auto: create
  h2:
    console:
      enabled: true      
  rabbitmq:
    ## Common defaults for RabbitMQ docker
    username: guest
    password: guest   
  mvc:
    favicon.enabled: false
  resources:
    add-mappings: false    
### ---------------------------------------------
### Enables full management features, best used during
### development, in order to view and audit anything
### in the runtime application context.
### ---------------------------------------------
management:
  context-path: /management
  security.enabled: false
  health:
    ## None of the health-endpoints works by default, since we are
    ## custom enabling/disabling the modules.
    #rabbit.enabled: false
    #mongo.enabled: false
endpoints:
#  auditevents.enabled: true
#  autoconfig.enabled: true
#  configprops.enabled: true
#  docs.enabled: true
#  dump.enabled: true
#  env.enabled: true
#  health.enabled: true
#  heapdump.enabled: true
#  info.enabled: true
   liquibase.enabled: true # If it applies
#  logfile.enabled: true
#  loggers.enabled: true
#  mappings.enabled: true
#  metrics.enabled: true
#  shutdown.enabled: true
#  trace.enabled: true
logging:
  level:
    #root: ERROR
    com.studiomediatech.contessa: DEBUG
    ## Enable lines below for Hibernate/Query logs
    #org.hibernate.SQL: DEBUG
    #org.hibernate.type.descriptor.sql.BasicBinder: TRACE